"""
Django settings for News_VVS project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from os.path import join, dirname


load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'news',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_apscheduler',
    # ... include the providers you want to enable:
    #'allauth.socialaccount.providers.google',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
]

ROOT_URLCONF = 'News_VVS.urls'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'News_VVS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en'
# LANGUAGE_CODE = 'ru'
LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Русский'),
]
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}


LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/news'

ADMINS = [
    ('admin', os.getenv('EMAIL_ADMIN')),
    # список всех админов в формате ('имя', 'их почта')
]
SERVER_EMAIL = os.getenv('SERVER_EMAIL')  # это будет у нас вместо аргумента FROM в массовой рассылке

EMAIL_HOST = os.getenv('EMAIL_HOST')  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = os.getenv('EMAIL_PORT')  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # ваше имя пользователя, например, если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl

DEFAULT_FROM_EMAIL = os.getenv('SERVER_EMAIL')  # Адрес электронной почты по умолчанию, который будет использоваться для различной автоматической
# корреспонденции от менеджера(ов) сайта.
# Сюда не входят сообщения об ошибках, отправленные на адреса ADMINS и MANAGERS; для этого смотрите SERVER_EMAIL.

# формат даты, которую будет воспринимать наш задачник
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

DAILY_POST_LIMIT = 3

CELERY_BROKER_URL = 'redis-12339.c1.asia-northeast1-1.gce.cloud.redislabs.com:12339'
CELERY_RESULT_BACKEND = 'redis-12339.c1.asia-northeast1-1.gce.cloud.redislabs.com:12339'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = TIME_ZONE


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        #Debug in Console
        'console_deb': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
        # INFO in Console
        'console_inf': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
        # WARNING in Console
        'console_warning': {
            'format': '%(levelname)s %(asctime)s %(message)s %(pathname)s'
        },
        # ERROR, CRITICAL in Console
        'con_error_critic': {
            'format': '%(levelname)s %(asctime)s %(message)s %(pathname)s %(exc_info)s'
        },

        # INFO in File
        'file_info_format': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
        # ERROR in File
        'file_error_format': {
            'format': '%(levelname)s %(asctime)s %(message)s %(pathname)s %(exc_info)s'
        },
        # SECURITY in File
        'file_security': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },

        # MAIL
        'mail': {
            'format': '%(levelname)s : %(asctime)s : %(message)s : %(pathname)s'
        }
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    'handlers': {
        # DEBUG in Console
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_deb',
        },
        # INFO in Console
        'console_info': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'console_inf',
        },
        # WARNING in Console
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning',
        },
        # ERROR, CRITICAL in Console
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'con_error_critic',
        },
        # INFO in File
        'file_info': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'formatter': 'file_info_format',
            'filename': 'general.log'
        },
        # ERROR in File
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'file_error_format',
            'filename': 'error.log'
        },
        # INFO Security in File
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file_security',
            'filename': 'security.log'
        },
        # ERROR for Email
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail',
        },
    },

    'loggers': {
        'django': {
            'handlers': [
                'console_debug',
                'console_info',
                'console_warning',
                'console_error',
                'file_info',
            ],
            'level': 'INFO',
            'propagate': True,
        },

        'django.request': {
            'handlers': [
                'mail_admins',
                'file_error',
            ],
            'level': 'ERROR',
            'propagate': False,
        },

        'django.server': {
            'handlers': [
                'mail_admins',
                'file_error',
            ],
            'level': 'ERROR',
            'propagate': False,
        },

        'django.template': {
            'handlers': [
                'file_error',
            ],
            'level': 'ERROR',
            'propagate': False,
        },

        'django.db.backends': {
            'handlers': [
                'file_error',
            ],
            'level': 'ERROR',
            'propagate': False,
        },

        'django.security': {
            'handlers': [
                'file_security',
            ],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
